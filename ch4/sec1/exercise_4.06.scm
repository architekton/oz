(define (let? exps) (tagged-list? exps 'let))

(define (let-vars exps)
  (if (null? exps)
      '()
      (cons (caar exps) (let-vars (cdr exps)))))

(define (let-vals exps)
  (if (null? exps)
      '()
      (cons (cadar exps) (let-vars (cdr exps)))))

(define (let->combination exps)
  (cons (make-lambda (let-vars (cadr exps))  (cddr exps))
        (let-vals (cadr exps))))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((let? exp) (eval (let->combination exp) env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
          (error "Unknown expression type -- EVAL" exp))))

